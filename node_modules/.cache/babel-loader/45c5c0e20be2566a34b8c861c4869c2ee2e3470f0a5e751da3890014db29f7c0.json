{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harshith2002\\\\quizzie\\\\src\\\\components\\\\QAQuestionModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './QAQuestionModal.css';\nimport QuizPublishedModal from './QuizPublishedModal'; // Import the QuizPublishedModal\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QAQuestionModal = ({\n  isOpen,\n  onClose,\n  onCreateQuiz,\n  quizType\n}) => {\n  _s();\n  const initialQuestionState = [{\n    questionText: '',\n    optionType: 'Text',\n    options: [{\n      text: '',\n      imageUrl: ''\n    }],\n    correctOption: null,\n    timer: 'OFF'\n  }];\n  const [questions, setQuestions] = useState(initialQuestionState);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [globalOptionType, setGlobalOptionType] = useState('Text');\n  const [isQuizPublishedModalOpen, setQuizPublishedModalOpen] = useState(false); // State to manage the visibility of QuizPublishedModal\n  const [quizLink, setQuizLink] = useState(''); // State to store the generated quiz link\n\n  // Load quiz data from localStorage on component mount\n  useEffect(() => {\n    const savedQuizData = localStorage.getItem('currentQuizData');\n    if (savedQuizData) {\n      const {\n        questions,\n        currentQuestionIndex,\n        globalOptionType\n      } = JSON.parse(savedQuizData);\n      setQuestions(questions);\n      setCurrentQuestionIndex(currentQuestionIndex);\n      setGlobalOptionType(globalOptionType);\n    }\n  }, []);\n\n  // Save quiz data to localStorage whenever questions or settings change\n  useEffect(() => {\n    const quizData = {\n      questions,\n      currentQuestionIndex,\n      globalOptionType\n    };\n    localStorage.setItem('currentQuizData', JSON.stringify(quizData));\n  }, [questions, currentQuestionIndex, globalOptionType]);\n  const resetForm = () => {\n    setQuestions(initialQuestionState);\n    setCurrentQuestionIndex(0);\n    setGlobalOptionType('Text');\n  };\n  const handleAddOption = () => {\n    if (questions[currentQuestionIndex].options.length < 4) {\n      const updatedQuestions = [...questions];\n      updatedQuestions[currentQuestionIndex].options.push({\n        text: '',\n        imageUrl: ''\n      });\n      setQuestions(updatedQuestions);\n    }\n  };\n  const handleOptionChange = (index, key, value) => {\n    const updatedQuestions = [...questions];\n    updatedQuestions[currentQuestionIndex].options[index][key] = value;\n    setQuestions(updatedQuestions);\n  };\n  const handleRemoveOption = index => {\n    const updatedQuestions = [...questions];\n    updatedQuestions[currentQuestionIndex].options = updatedQuestions[currentQuestionIndex].options.filter((_, i) => i !== index);\n    setQuestions(updatedQuestions);\n  };\n  const handleQuestionTextChange = value => {\n    const updatedQuestions = [...questions];\n    updatedQuestions[currentQuestionIndex].questionText = value;\n    setQuestions(updatedQuestions);\n  };\n  const handleOptionTypeChange = value => {\n    resetForm(); // Reset the form when the option type is changed\n    setGlobalOptionType(value);\n  };\n  const handleAddQuestion = () => {\n    if (questions.length < 5) {\n      setQuestions([...questions, {\n        questionText: '',\n        optionType: globalOptionType,\n        options: [{\n          text: '',\n          imageUrl: ''\n        }]\n      }]);\n      setCurrentQuestionIndex(questions.length);\n    }\n  };\n  const handleQuestionSelect = index => {\n    setCurrentQuestionIndex(index);\n  };\n  const handleCreateQuiz = () => {\n    const quizId = `quiz-${Date.now()}`; // Generate a unique ID for the quiz\n    const existingQuizzes = JSON.parse(localStorage.getItem('quizzes')) || [];\n    const newQuiz = {\n      id: quizId,\n      questions,\n      globalOptionType,\n      createdAt: new Date().toISOString()\n    };\n    localStorage.setItem('quizzes', JSON.stringify([...existingQuizzes, newQuiz]));\n    const generatedLink = `${window.location.origin}/quiz/${quizId}`; // Use window.location.origin for the base URL\n    setQuizLink(generatedLink);\n    setQuizPublishedModalOpen(true); // Open the Quiz Published Modal\n\n    onCreateQuiz(newQuiz); // Pass the quiz data to the parent component\n    resetForm(); // Reset the form after creating the quiz\n  };\n  const handleCloseQuizPublishedModal = () => {\n    setQuizPublishedModalOpen(false);\n    onClose(); // Close the main modal after sharing\n  };\n  const handleCancel = () => {\n    onClose();\n  };\n  const getPlaceholder = key => {\n    switch (questions[currentQuestionIndex].optionType) {\n      case 'Text':\n        return 'Text';\n      case 'Image URL':\n        return 'Image URL';\n      case 'Text & Image URL':\n        return key === 'text' ? 'Text' : 'Image URL';\n      default:\n        return 'Option';\n    }\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content qa-question-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-nav\",\n          children: [questions.map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `question-num ${index === currentQuestionIndex ? 'active' : ''}`,\n            onClick: () => handleQuestionSelect(index),\n            children: index + 1\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this)), questions.length < 5 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"add-question\",\n            onClick: handleAddQuestion,\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: quizType === 'Q&A' ? \"Q&A Question\" : \"Poll Question\",\n          value: questions[currentQuestionIndex].questionText,\n          onChange: e => handleQuestionTextChange(e.target.value),\n          className: \"poll-question-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"option-type-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Option Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"optionType\",\n              value: \"Text\",\n              checked: globalOptionType === 'Text',\n              onChange: () => handleOptionTypeChange('Text')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this), \"Text\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"optionType\",\n              value: \"Image URL\",\n              checked: globalOptionType === 'Image URL',\n              onChange: () => handleOptionTypeChange('Image URL')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 15\n            }, this), \"Image URL\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"optionType\",\n              value: \"Text & Image URL\",\n              checked: globalOptionType === 'Text & Image URL',\n              onChange: () => handleOptionTypeChange('Text & Image URL')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 15\n            }, this), \"Text & Image URL\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-container\",\n          children: [questions[currentQuestionIndex].options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"option\",\n            children: [quizType === 'Q&A' && /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"correctOption\",\n              checked: questions[currentQuestionIndex].correctOption === index,\n              onChange: () => {\n                const updatedQuestions = [...questions];\n                updatedQuestions[currentQuestionIndex].correctOption = index;\n                setQuestions(updatedQuestions);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: option.text,\n              onChange: e => handleOptionChange(index, 'text', e.target.value),\n              placeholder: getPlaceholder('text'),\n              className: \"option-text-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 17\n            }, this), globalOptionType === 'Text & Image URL' && /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: option.imageUrl,\n              onChange: e => handleOptionChange(index, 'imageUrl', e.target.value),\n              placeholder: getPlaceholder('imageUrl'),\n              className: \"option-image-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 19\n            }, this), index > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"remove-option\",\n              onClick: () => handleRemoveOption(index),\n              children: \"\\uD83D\\uDDD1\\uFE0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this)), questions[currentQuestionIndex].options.length < 4 && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-option\",\n            onClick: handleAddOption,\n            children: \"Add Option\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), quizType === 'Q&A' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timer-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Timer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `timer-button ${questions[currentQuestionIndex].timer === 'OFF' ? 'active' : ''}`,\n            onClick: () => {\n              const updatedQuestions = [...questions];\n              updatedQuestions[currentQuestionIndex].timer = 'OFF';\n              setQuestions(updatedQuestions);\n            },\n            children: \"OFF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `timer-button ${questions[currentQuestionIndex].timer === '5 sec' ? 'active' : ''}`,\n            onClick: () => {\n              const updatedQuestions = [...questions];\n              updatedQuestions[currentQuestionIndex].timer = '5 sec';\n              setQuestions(updatedQuestions);\n            },\n            children: \"5 sec\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `timer-button ${questions[currentQuestionIndex].timer === '10 sec' ? 'active' : ''}`,\n            onClick: () => {\n              const updatedQuestions = [...questions];\n              updatedQuestions[currentQuestionIndex].timer = '10 sec';\n              setQuestions(updatedQuestions);\n            },\n            children: \"10 sec\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modal-button cancel-button\",\n            onClick: handleCancel,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modal-button continue-button\",\n            onClick: handleCreateQuiz,\n            children: \"Create Quiz\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QuizPublishedModal, {\n      isOpen: isQuizPublishedModalOpen,\n      onClose: handleCloseQuizPublishedModal,\n      quizLink: quizLink\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(QAQuestionModal, \"tf/TEv4BhGNdw7LeHeLm0vDI+i4=\");\n_c = QAQuestionModal;\nexport default QAQuestionModal;\nvar _c;\n$RefreshReg$(_c, \"QAQuestionModal\");","map":{"version":3,"names":["React","useState","useEffect","QuizPublishedModal","jsxDEV","_jsxDEV","Fragment","_Fragment","QAQuestionModal","isOpen","onClose","onCreateQuiz","quizType","_s","initialQuestionState","questionText","optionType","options","text","imageUrl","correctOption","timer","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","globalOptionType","setGlobalOptionType","isQuizPublishedModalOpen","setQuizPublishedModalOpen","quizLink","setQuizLink","savedQuizData","localStorage","getItem","JSON","parse","quizData","setItem","stringify","resetForm","handleAddOption","length","updatedQuestions","push","handleOptionChange","index","key","value","handleRemoveOption","filter","_","i","handleQuestionTextChange","handleOptionTypeChange","handleAddQuestion","handleQuestionSelect","handleCreateQuiz","quizId","Date","now","existingQuizzes","newQuiz","id","createdAt","toISOString","generatedLink","window","location","origin","handleCloseQuizPublishedModal","handleCancel","getPlaceholder","children","className","map","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","name","checked","option","_c","$RefreshReg$"],"sources":["C:/Users/harshith2002/quizzie/src/components/QAQuestionModal.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './QAQuestionModal.css';\r\nimport QuizPublishedModal from './QuizPublishedModal';  // Import the QuizPublishedModal\r\n\r\nconst QAQuestionModal = ({ isOpen, onClose, onCreateQuiz, quizType }) => {\r\n  const initialQuestionState = [\r\n    { questionText: '', optionType: 'Text', options: [{ text: '', imageUrl: '' }], correctOption: null, timer: 'OFF' }\r\n  ];\r\n\r\n  const [questions, setQuestions] = useState(initialQuestionState);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [globalOptionType, setGlobalOptionType] = useState('Text');\r\n  const [isQuizPublishedModalOpen, setQuizPublishedModalOpen] = useState(false); // State to manage the visibility of QuizPublishedModal\r\n  const [quizLink, setQuizLink] = useState(''); // State to store the generated quiz link\r\n\r\n  // Load quiz data from localStorage on component mount\r\n  useEffect(() => {\r\n    const savedQuizData = localStorage.getItem('currentQuizData');\r\n    if (savedQuizData) {\r\n      const { questions, currentQuestionIndex, globalOptionType } = JSON.parse(savedQuizData);\r\n      setQuestions(questions);\r\n      setCurrentQuestionIndex(currentQuestionIndex);\r\n      setGlobalOptionType(globalOptionType);\r\n    }\r\n  }, []);\r\n\r\n  // Save quiz data to localStorage whenever questions or settings change\r\n  useEffect(() => {\r\n    const quizData = {\r\n      questions,\r\n      currentQuestionIndex,\r\n      globalOptionType,\r\n    };\r\n    localStorage.setItem('currentQuizData', JSON.stringify(quizData));\r\n  }, [questions, currentQuestionIndex, globalOptionType]);\r\n\r\n  const resetForm = () => {\r\n    setQuestions(initialQuestionState);\r\n    setCurrentQuestionIndex(0);\r\n    setGlobalOptionType('Text');\r\n  };\r\n\r\n  const handleAddOption = () => {\r\n    if (questions[currentQuestionIndex].options.length < 4) {\r\n      const updatedQuestions = [...questions];\r\n      updatedQuestions[currentQuestionIndex].options.push({ text: '', imageUrl: '' });\r\n      setQuestions(updatedQuestions);\r\n    }\r\n  };\r\n\r\n  const handleOptionChange = (index, key, value) => {\r\n    const updatedQuestions = [...questions];\r\n    updatedQuestions[currentQuestionIndex].options[index][key] = value;\r\n    setQuestions(updatedQuestions);\r\n  };\r\n\r\n  const handleRemoveOption = (index) => {\r\n    const updatedQuestions = [...questions];\r\n    updatedQuestions[currentQuestionIndex].options = updatedQuestions[currentQuestionIndex].options.filter(\r\n      (_, i) => i !== index\r\n    );\r\n    setQuestions(updatedQuestions);\r\n  };\r\n\r\n  const handleQuestionTextChange = (value) => {\r\n    const updatedQuestions = [...questions];\r\n    updatedQuestions[currentQuestionIndex].questionText = value;\r\n    setQuestions(updatedQuestions);\r\n  };\r\n\r\n  const handleOptionTypeChange = (value) => {\r\n    resetForm(); // Reset the form when the option type is changed\r\n    setGlobalOptionType(value);\r\n  };\r\n\r\n  const handleAddQuestion = () => {\r\n    if (questions.length < 5) {\r\n      setQuestions([\r\n        ...questions,\r\n        { questionText: '', optionType: globalOptionType, options: [{ text: '', imageUrl: '' }] }\r\n      ]);\r\n      setCurrentQuestionIndex(questions.length);\r\n    }\r\n  };\r\n\r\n  const handleQuestionSelect = (index) => {\r\n    setCurrentQuestionIndex(index);\r\n  };\r\n\r\n  const handleCreateQuiz = () => {\r\n    const quizId = `quiz-${Date.now()}`; // Generate a unique ID for the quiz\r\n    const existingQuizzes = JSON.parse(localStorage.getItem('quizzes')) || [];\r\n    const newQuiz = {\r\n      id: quizId,\r\n      questions,\r\n      globalOptionType,\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n    localStorage.setItem('quizzes', JSON.stringify([...existingQuizzes, newQuiz]));\r\n    \r\n    const generatedLink = `${window.location.origin}/quiz/${quizId}`; // Use window.location.origin for the base URL\r\n    setQuizLink(generatedLink);\r\n    setQuizPublishedModalOpen(true); // Open the Quiz Published Modal\r\n    \r\n    onCreateQuiz(newQuiz); // Pass the quiz data to the parent component\r\n    resetForm(); // Reset the form after creating the quiz\r\n  };\r\n\r\n  const handleCloseQuizPublishedModal = () => {\r\n    setQuizPublishedModalOpen(false);\r\n    onClose(); // Close the main modal after sharing\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    onClose();\r\n  };\r\n\r\n  const getPlaceholder = (key) => {\r\n    switch (questions[currentQuestionIndex].optionType) {\r\n      case 'Text':\r\n        return 'Text';\r\n      case 'Image URL':\r\n        return 'Image URL';\r\n      case 'Text & Image URL':\r\n        return key === 'text' ? 'Text' : 'Image URL';\r\n      default:\r\n        return 'Option';\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"modal-overlay\">\r\n        <div className=\"modal-content qa-question-modal\">\r\n          <div className=\"question-nav\">\r\n            {questions.map((_, index) => (\r\n              <div\r\n                key={index}\r\n                className={`question-num ${index === currentQuestionIndex ? 'active' : ''}`}\r\n                onClick={() => handleQuestionSelect(index)}\r\n              >\r\n                {index + 1}\r\n              </div>\r\n            ))}\r\n            {questions.length < 5 && (\r\n              <div className=\"add-question\" onClick={handleAddQuestion}>\r\n                +\r\n              </div>\r\n            )}\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            placeholder={quizType === 'Q&A' ? \"Q&A Question\" : \"Poll Question\"}\r\n            value={questions[currentQuestionIndex].questionText}\r\n            onChange={(e) => handleQuestionTextChange(e.target.value)}\r\n            className=\"poll-question-input\"\r\n          />\r\n          <div className=\"option-type-container\">\r\n            <label>Option Type</label>\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"optionType\"\r\n                value=\"Text\"\r\n                checked={globalOptionType === 'Text'}\r\n                onChange={() => handleOptionTypeChange('Text')}\r\n              />\r\n              Text\r\n            </label>\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"optionType\"\r\n                value=\"Image URL\"\r\n                checked={globalOptionType === 'Image URL'}\r\n                onChange={() => handleOptionTypeChange('Image URL')}\r\n              />\r\n              Image URL\r\n            </label>\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"optionType\"\r\n                value=\"Text & Image URL\"\r\n                checked={globalOptionType === 'Text & Image URL'}\r\n                onChange={() => handleOptionTypeChange('Text & Image URL')}\r\n              />\r\n              Text & Image URL\r\n            </label>\r\n          </div>\r\n          <div className=\"options-container\">\r\n            {questions[currentQuestionIndex].options.map((option, index) => (\r\n              <div key={index} className=\"option\">\r\n                {quizType === 'Q&A' && (\r\n                  <input\r\n                    type=\"radio\"\r\n                    name=\"correctOption\"\r\n                    checked={questions[currentQuestionIndex].correctOption === index}\r\n                    onChange={() => {\r\n                      const updatedQuestions = [...questions];\r\n                      updatedQuestions[currentQuestionIndex].correctOption = index;\r\n                      setQuestions(updatedQuestions);\r\n                    }}\r\n                  />\r\n                )}\r\n                <input\r\n                  type=\"text\"\r\n                  value={option.text}\r\n                  onChange={(e) => handleOptionChange(index, 'text', e.target.value)}\r\n                  placeholder={getPlaceholder('text')}\r\n                  className=\"option-text-input\"\r\n                />\r\n                {globalOptionType === 'Text & Image URL' && (\r\n                  <input\r\n                    type=\"text\"\r\n                    value={option.imageUrl}\r\n                    onChange={(e) => handleOptionChange(index, 'imageUrl', e.target.value)}\r\n                    placeholder={getPlaceholder('imageUrl')}\r\n                    className=\"option-image-input\"\r\n                  />\r\n                )}\r\n                {index > 0 && (\r\n                  <button className=\"remove-option\" onClick={() => handleRemoveOption(index)}>\r\n                    🗑️\r\n                  </button>\r\n                )}\r\n              </div>\r\n            ))}\r\n            {questions[currentQuestionIndex].options.length < 4 && (\r\n              <button className=\"add-option\" onClick={handleAddOption}>\r\n                Add Option\r\n              </button>\r\n            )}\r\n          </div>\r\n          {quizType === 'Q&A' && (\r\n            <div className=\"timer-container\">\r\n              <label>Timer</label>\r\n              <button\r\n                className={`timer-button ${questions[currentQuestionIndex].timer === 'OFF' ? 'active' : ''}`}\r\n                onClick={() => {\r\n                  const updatedQuestions = [...questions];\r\n                  updatedQuestions[currentQuestionIndex].timer = 'OFF';\r\n                  setQuestions(updatedQuestions);\r\n                }}\r\n              >\r\n                OFF\r\n              </button>\r\n              <button\r\n                className={`timer-button ${questions[currentQuestionIndex].timer === '5 sec' ? 'active' : ''}`}\r\n                onClick={() => {\r\n                  const updatedQuestions = [...questions];\r\n                  updatedQuestions[currentQuestionIndex].timer = '5 sec';\r\n                  setQuestions(updatedQuestions);\r\n                }}\r\n              >\r\n                5 sec\r\n              </button>\r\n              <button\r\n                className={`timer-button ${questions[currentQuestionIndex].timer === '10 sec' ? 'active' : ''}`}\r\n                onClick={() => {\r\n                  const updatedQuestions = [...questions];\r\n                  updatedQuestions[currentQuestionIndex].timer = '10 sec';\r\n                  setQuestions(updatedQuestions);\r\n                }}\r\n              >\r\n                10 sec\r\n              </button>\r\n            </div>\r\n          )}\r\n          <div className=\"modal-buttons\">\r\n            <button className=\"modal-button cancel-button\" onClick={handleCancel}>\r\n              Cancel\r\n            </button>\r\n            <button\r\n              className=\"modal-button continue-button\"\r\n              onClick={handleCreateQuiz}\r\n            >\r\n              Create Quiz\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Include the QuizPublishedModal */}\r\n      <QuizPublishedModal\r\n        isOpen={isQuizPublishedModalOpen}\r\n        onClose={handleCloseQuizPublishedModal}\r\n        quizLink={quizLink}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QAQuestionModal;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,uBAAuB;AAC9B,OAAOC,kBAAkB,MAAM,sBAAsB,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAExD,MAAMC,eAAe,GAAGA,CAAC;EAAEC,MAAM;EAAEC,OAAO;EAAEC,YAAY;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvE,MAAMC,oBAAoB,GAAG,CAC3B;IAAEC,YAAY,EAAE,EAAE;IAAEC,UAAU,EAAE,MAAM;IAAEC,OAAO,EAAE,CAAC;MAAEC,IAAI,EAAE,EAAE;MAAEC,QAAQ,EAAE;IAAG,CAAC,CAAC;IAAEC,aAAa,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAM,CAAC,CACnH;EAED,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAACa,oBAAoB,CAAC;EAChE,MAAM,CAACU,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAACyB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG1B,QAAQ,CAAC,MAAM,CAAC;EAChE,MAAM,CAAC2B,wBAAwB,EAAEC,yBAAyB,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/E,MAAM,CAAC6B,QAAQ,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd,MAAM8B,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IAC7D,IAAIF,aAAa,EAAE;MACjB,MAAM;QAAEV,SAAS;QAAEE,oBAAoB;QAAEE;MAAiB,CAAC,GAAGS,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAC;MACvFT,YAAY,CAACD,SAAS,CAAC;MACvBG,uBAAuB,CAACD,oBAAoB,CAAC;MAC7CG,mBAAmB,CAACD,gBAAgB,CAAC;IACvC;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAxB,SAAS,CAAC,MAAM;IACd,MAAMmC,QAAQ,GAAG;MACff,SAAS;MACTE,oBAAoB;MACpBE;IACF,CAAC;IACDO,YAAY,CAACK,OAAO,CAAC,iBAAiB,EAAEH,IAAI,CAACI,SAAS,CAACF,QAAQ,CAAC,CAAC;EACnE,CAAC,EAAE,CAACf,SAAS,EAAEE,oBAAoB,EAAEE,gBAAgB,CAAC,CAAC;EAEvD,MAAMc,SAAS,GAAGA,CAAA,KAAM;IACtBjB,YAAY,CAACT,oBAAoB,CAAC;IAClCW,uBAAuB,CAAC,CAAC,CAAC;IAC1BE,mBAAmB,CAAC,MAAM,CAAC;EAC7B,CAAC;EAED,MAAMc,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAInB,SAAS,CAACE,oBAAoB,CAAC,CAACP,OAAO,CAACyB,MAAM,GAAG,CAAC,EAAE;MACtD,MAAMC,gBAAgB,GAAG,CAAC,GAAGrB,SAAS,CAAC;MACvCqB,gBAAgB,CAACnB,oBAAoB,CAAC,CAACP,OAAO,CAAC2B,IAAI,CAAC;QAAE1B,IAAI,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAG,CAAC,CAAC;MAC/EI,YAAY,CAACoB,gBAAgB,CAAC;IAChC;EACF,CAAC;EAED,MAAME,kBAAkB,GAAGA,CAACC,KAAK,EAAEC,GAAG,EAAEC,KAAK,KAAK;IAChD,MAAML,gBAAgB,GAAG,CAAC,GAAGrB,SAAS,CAAC;IACvCqB,gBAAgB,CAACnB,oBAAoB,CAAC,CAACP,OAAO,CAAC6B,KAAK,CAAC,CAACC,GAAG,CAAC,GAAGC,KAAK;IAClEzB,YAAY,CAACoB,gBAAgB,CAAC;EAChC,CAAC;EAED,MAAMM,kBAAkB,GAAIH,KAAK,IAAK;IACpC,MAAMH,gBAAgB,GAAG,CAAC,GAAGrB,SAAS,CAAC;IACvCqB,gBAAgB,CAACnB,oBAAoB,CAAC,CAACP,OAAO,GAAG0B,gBAAgB,CAACnB,oBAAoB,CAAC,CAACP,OAAO,CAACiC,MAAM,CACpG,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,KAAKN,KAClB,CAAC;IACDvB,YAAY,CAACoB,gBAAgB,CAAC;EAChC,CAAC;EAED,MAAMU,wBAAwB,GAAIL,KAAK,IAAK;IAC1C,MAAML,gBAAgB,GAAG,CAAC,GAAGrB,SAAS,CAAC;IACvCqB,gBAAgB,CAACnB,oBAAoB,CAAC,CAACT,YAAY,GAAGiC,KAAK;IAC3DzB,YAAY,CAACoB,gBAAgB,CAAC;EAChC,CAAC;EAED,MAAMW,sBAAsB,GAAIN,KAAK,IAAK;IACxCR,SAAS,CAAC,CAAC,CAAC,CAAC;IACbb,mBAAmB,CAACqB,KAAK,CAAC;EAC5B,CAAC;EAED,MAAMO,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAIjC,SAAS,CAACoB,MAAM,GAAG,CAAC,EAAE;MACxBnB,YAAY,CAAC,CACX,GAAGD,SAAS,EACZ;QAAEP,YAAY,EAAE,EAAE;QAAEC,UAAU,EAAEU,gBAAgB;QAAET,OAAO,EAAE,CAAC;UAAEC,IAAI,EAAE,EAAE;UAAEC,QAAQ,EAAE;QAAG,CAAC;MAAE,CAAC,CAC1F,CAAC;MACFM,uBAAuB,CAACH,SAAS,CAACoB,MAAM,CAAC;IAC3C;EACF,CAAC;EAED,MAAMc,oBAAoB,GAAIV,KAAK,IAAK;IACtCrB,uBAAuB,CAACqB,KAAK,CAAC;EAChC,CAAC;EAED,MAAMW,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAMC,MAAM,GAAG,QAAQC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IACrC,MAAMC,eAAe,GAAG1B,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE;IACzE,MAAM4B,OAAO,GAAG;MACdC,EAAE,EAAEL,MAAM;MACVpC,SAAS;MACTI,gBAAgB;MAChBsC,SAAS,EAAE,IAAIL,IAAI,CAAC,CAAC,CAACM,WAAW,CAAC;IACpC,CAAC;IACDhC,YAAY,CAACK,OAAO,CAAC,SAAS,EAAEH,IAAI,CAACI,SAAS,CAAC,CAAC,GAAGsB,eAAe,EAAEC,OAAO,CAAC,CAAC,CAAC;IAE9E,MAAMI,aAAa,GAAG,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM,SAASX,MAAM,EAAE,CAAC,CAAC;IAClE3B,WAAW,CAACmC,aAAa,CAAC;IAC1BrC,yBAAyB,CAAC,IAAI,CAAC,CAAC,CAAC;;IAEjClB,YAAY,CAACmD,OAAO,CAAC,CAAC,CAAC;IACvBtB,SAAS,CAAC,CAAC,CAAC,CAAC;EACf,CAAC;EAED,MAAM8B,6BAA6B,GAAGA,CAAA,KAAM;IAC1CzC,yBAAyB,CAAC,KAAK,CAAC;IAChCnB,OAAO,CAAC,CAAC,CAAC,CAAC;EACb,CAAC;EAED,MAAM6D,YAAY,GAAGA,CAAA,KAAM;IACzB7D,OAAO,CAAC,CAAC;EACX,CAAC;EAED,MAAM8D,cAAc,GAAIzB,GAAG,IAAK;IAC9B,QAAQzB,SAAS,CAACE,oBAAoB,CAAC,CAACR,UAAU;MAChD,KAAK,MAAM;QACT,OAAO,MAAM;MACf,KAAK,WAAW;QACd,OAAO,WAAW;MACpB,KAAK,kBAAkB;QACrB,OAAO+B,GAAG,KAAK,MAAM,GAAG,MAAM,GAAG,WAAW;MAC9C;QACE,OAAO,QAAQ;IACnB;EACF,CAAC;EAED,IAAI,CAACtC,MAAM,EAAE,OAAO,IAAI;EAExB,oBACEJ,OAAA,CAAAE,SAAA;IAAAkE,QAAA,gBACEpE,OAAA;MAAKqE,SAAS,EAAC,eAAe;MAAAD,QAAA,eAC5BpE,OAAA;QAAKqE,SAAS,EAAC,iCAAiC;QAAAD,QAAA,gBAC9CpE,OAAA;UAAKqE,SAAS,EAAC,cAAc;UAAAD,QAAA,GAC1BnD,SAAS,CAACqD,GAAG,CAAC,CAACxB,CAAC,EAAEL,KAAK,kBACtBzC,OAAA;YAEEqE,SAAS,EAAE,gBAAgB5B,KAAK,KAAKtB,oBAAoB,GAAG,QAAQ,GAAG,EAAE,EAAG;YAC5EoD,OAAO,EAAEA,CAAA,KAAMpB,oBAAoB,CAACV,KAAK,CAAE;YAAA2B,QAAA,EAE1C3B,KAAK,GAAG;UAAC,GAJLA,KAAK;YAAA+B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAKP,CACN,CAAC,EACD1D,SAAS,CAACoB,MAAM,GAAG,CAAC,iBACnBrC,OAAA;YAAKqE,SAAS,EAAC,cAAc;YAACE,OAAO,EAAErB,iBAAkB;YAAAkB,QAAA,EAAC;UAE1D;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CACN;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,eACN3E,OAAA;UACE4E,IAAI,EAAC,MAAM;UACXC,WAAW,EAAEtE,QAAQ,KAAK,KAAK,GAAG,cAAc,GAAG,eAAgB;UACnEoC,KAAK,EAAE1B,SAAS,CAACE,oBAAoB,CAAC,CAACT,YAAa;UACpDoE,QAAQ,EAAGC,CAAC,IAAK/B,wBAAwB,CAAC+B,CAAC,CAACC,MAAM,CAACrC,KAAK,CAAE;UAC1D0B,SAAS,EAAC;QAAqB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC,CAAC,eACF3E,OAAA;UAAKqE,SAAS,EAAC,uBAAuB;UAAAD,QAAA,gBACpCpE,OAAA;YAAAoE,QAAA,EAAO;UAAW;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC1B3E,OAAA;YAAAoE,QAAA,gBACEpE,OAAA;cACE4E,IAAI,EAAC,OAAO;cACZK,IAAI,EAAC,YAAY;cACjBtC,KAAK,EAAC,MAAM;cACZuC,OAAO,EAAE7D,gBAAgB,KAAK,MAAO;cACrCyD,QAAQ,EAAEA,CAAA,KAAM7B,sBAAsB,CAAC,MAAM;YAAE;cAAAuB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChD,CAAC,QAEJ;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACR3E,OAAA;YAAAoE,QAAA,gBACEpE,OAAA;cACE4E,IAAI,EAAC,OAAO;cACZK,IAAI,EAAC,YAAY;cACjBtC,KAAK,EAAC,WAAW;cACjBuC,OAAO,EAAE7D,gBAAgB,KAAK,WAAY;cAC1CyD,QAAQ,EAAEA,CAAA,KAAM7B,sBAAsB,CAAC,WAAW;YAAE;cAAAuB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACrD,CAAC,aAEJ;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACR3E,OAAA;YAAAoE,QAAA,gBACEpE,OAAA;cACE4E,IAAI,EAAC,OAAO;cACZK,IAAI,EAAC,YAAY;cACjBtC,KAAK,EAAC,kBAAkB;cACxBuC,OAAO,EAAE7D,gBAAgB,KAAK,kBAAmB;cACjDyD,QAAQ,EAAEA,CAAA,KAAM7B,sBAAsB,CAAC,kBAAkB;YAAE;cAAAuB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5D,CAAC,oBAEJ;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eACN3E,OAAA;UAAKqE,SAAS,EAAC,mBAAmB;UAAAD,QAAA,GAC/BnD,SAAS,CAACE,oBAAoB,CAAC,CAACP,OAAO,CAAC0D,GAAG,CAAC,CAACa,MAAM,EAAE1C,KAAK,kBACzDzC,OAAA;YAAiBqE,SAAS,EAAC,QAAQ;YAAAD,QAAA,GAChC7D,QAAQ,KAAK,KAAK,iBACjBP,OAAA;cACE4E,IAAI,EAAC,OAAO;cACZK,IAAI,EAAC,eAAe;cACpBC,OAAO,EAAEjE,SAAS,CAACE,oBAAoB,CAAC,CAACJ,aAAa,KAAK0B,KAAM;cACjEqC,QAAQ,EAAEA,CAAA,KAAM;gBACd,MAAMxC,gBAAgB,GAAG,CAAC,GAAGrB,SAAS,CAAC;gBACvCqB,gBAAgB,CAACnB,oBAAoB,CAAC,CAACJ,aAAa,GAAG0B,KAAK;gBAC5DvB,YAAY,CAACoB,gBAAgB,CAAC;cAChC;YAAE;cAAAkC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CACF,eACD3E,OAAA;cACE4E,IAAI,EAAC,MAAM;cACXjC,KAAK,EAAEwC,MAAM,CAACtE,IAAK;cACnBiE,QAAQ,EAAGC,CAAC,IAAKvC,kBAAkB,CAACC,KAAK,EAAE,MAAM,EAAEsC,CAAC,CAACC,MAAM,CAACrC,KAAK,CAAE;cACnEkC,WAAW,EAAEV,cAAc,CAAC,MAAM,CAAE;cACpCE,SAAS,EAAC;YAAmB;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9B,CAAC,EACDtD,gBAAgB,KAAK,kBAAkB,iBACtCrB,OAAA;cACE4E,IAAI,EAAC,MAAM;cACXjC,KAAK,EAAEwC,MAAM,CAACrE,QAAS;cACvBgE,QAAQ,EAAGC,CAAC,IAAKvC,kBAAkB,CAACC,KAAK,EAAE,UAAU,EAAEsC,CAAC,CAACC,MAAM,CAACrC,KAAK,CAAE;cACvEkC,WAAW,EAAEV,cAAc,CAAC,UAAU,CAAE;cACxCE,SAAS,EAAC;YAAoB;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC/B,CACF,EACAlC,KAAK,GAAG,CAAC,iBACRzC,OAAA;cAAQqE,SAAS,EAAC,eAAe;cAACE,OAAO,EAAEA,CAAA,KAAM3B,kBAAkB,CAACH,KAAK,CAAE;cAAA2B,QAAA,EAAC;YAE5E;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CACT;UAAA,GAjCOlC,KAAK;YAAA+B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAkCV,CACN,CAAC,EACD1D,SAAS,CAACE,oBAAoB,CAAC,CAACP,OAAO,CAACyB,MAAM,GAAG,CAAC,iBACjDrC,OAAA;YAAQqE,SAAS,EAAC,YAAY;YAACE,OAAO,EAAEnC,eAAgB;YAAAgC,QAAA,EAAC;UAEzD;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CACT;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,EACLpE,QAAQ,KAAK,KAAK,iBACjBP,OAAA;UAAKqE,SAAS,EAAC,iBAAiB;UAAAD,QAAA,gBAC9BpE,OAAA;YAAAoE,QAAA,EAAO;UAAK;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACpB3E,OAAA;YACEqE,SAAS,EAAE,gBAAgBpD,SAAS,CAACE,oBAAoB,CAAC,CAACH,KAAK,KAAK,KAAK,GAAG,QAAQ,GAAG,EAAE,EAAG;YAC7FuD,OAAO,EAAEA,CAAA,KAAM;cACb,MAAMjC,gBAAgB,GAAG,CAAC,GAAGrB,SAAS,CAAC;cACvCqB,gBAAgB,CAACnB,oBAAoB,CAAC,CAACH,KAAK,GAAG,KAAK;cACpDE,YAAY,CAACoB,gBAAgB,CAAC;YAChC,CAAE;YAAA8B,QAAA,EACH;UAED;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACT3E,OAAA;YACEqE,SAAS,EAAE,gBAAgBpD,SAAS,CAACE,oBAAoB,CAAC,CAACH,KAAK,KAAK,OAAO,GAAG,QAAQ,GAAG,EAAE,EAAG;YAC/FuD,OAAO,EAAEA,CAAA,KAAM;cACb,MAAMjC,gBAAgB,GAAG,CAAC,GAAGrB,SAAS,CAAC;cACvCqB,gBAAgB,CAACnB,oBAAoB,CAAC,CAACH,KAAK,GAAG,OAAO;cACtDE,YAAY,CAACoB,gBAAgB,CAAC;YAChC,CAAE;YAAA8B,QAAA,EACH;UAED;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACT3E,OAAA;YACEqE,SAAS,EAAE,gBAAgBpD,SAAS,CAACE,oBAAoB,CAAC,CAACH,KAAK,KAAK,QAAQ,GAAG,QAAQ,GAAG,EAAE,EAAG;YAChGuD,OAAO,EAAEA,CAAA,KAAM;cACb,MAAMjC,gBAAgB,GAAG,CAAC,GAAGrB,SAAS,CAAC;cACvCqB,gBAAgB,CAACnB,oBAAoB,CAAC,CAACH,KAAK,GAAG,QAAQ;cACvDE,YAAY,CAACoB,gBAAgB,CAAC;YAChC,CAAE;YAAA8B,QAAA,EACH;UAED;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CACN,eACD3E,OAAA;UAAKqE,SAAS,EAAC,eAAe;UAAAD,QAAA,gBAC5BpE,OAAA;YAAQqE,SAAS,EAAC,4BAA4B;YAACE,OAAO,EAAEL,YAAa;YAAAE,QAAA,EAAC;UAEtE;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACT3E,OAAA;YACEqE,SAAS,EAAC,8BAA8B;YACxCE,OAAO,EAAEnB,gBAAiB;YAAAgB,QAAA,EAC3B;UAED;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGN3E,OAAA,CAACF,kBAAkB;MACjBM,MAAM,EAAEmB,wBAAyB;MACjClB,OAAO,EAAE4D,6BAA8B;MACvCxC,QAAQ,EAAEA;IAAS;MAAA+C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC;EAAA,eACF,CAAC;AAEP,CAAC;AAACnE,EAAA,CAjSIL,eAAe;AAAAiF,EAAA,GAAfjF,eAAe;AAmSrB,eAAeA,eAAe;AAAC,IAAAiF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}