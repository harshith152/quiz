{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harshith2002\\\\quizzie\\\\src\\\\components\\\\QAQuestionModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './QAQuestionModal.css';\nimport ShareQuizModal from './ShareQuizModal'; // Import the ShareQuizModal component\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QAQuestionModal = ({\n  isOpen,\n  onClose,\n  onCreateQuiz,\n  quizType\n}) => {\n  _s();\n  const initialQuestionState = [{\n    questionText: '',\n    optionType: 'Text',\n    options: [{\n      text: '',\n      imageUrl: ''\n    }]\n  }];\n  const [questions, setQuestions] = useState(initialQuestionState);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [globalOptionType, setGlobalOptionType] = useState('Text');\n  const [isShareModalOpen, setShareModalOpen] = useState(false); // State for ShareQuizModal\n  const [quizLink, setQuizLink] = useState(''); // State to store the generated quiz link\n\n  const resetForm = () => {\n    setQuestions(initialQuestionState);\n    setCurrentQuestionIndex(0);\n    setGlobalOptionType('Text');\n  };\n  const handleAddOption = () => {\n    if (questions[currentQuestionIndex].options.length < 4) {\n      const updatedQuestions = [...questions];\n      updatedQuestions[currentQuestionIndex].options.push({\n        text: '',\n        imageUrl: ''\n      });\n      setQuestions(updatedQuestions);\n    }\n  };\n  const handleOptionChange = (index, key, value) => {\n    const updatedQuestions = [...questions];\n    updatedQuestions[currentQuestionIndex].options[index][key] = value;\n    setQuestions(updatedQuestions);\n  };\n  const handleRemoveOption = index => {\n    const updatedQuestions = [...questions];\n    updatedQuestions[currentQuestionIndex].options = updatedQuestions[currentQuestionIndex].options.filter((_, i) => i !== index);\n    setQuestions(updatedQuestions);\n  };\n  const handleQuestionTextChange = value => {\n    const updatedQuestions = [...questions];\n    updatedQuestions[currentQuestionIndex].questionText = value;\n    setQuestions(updatedQuestions);\n  };\n  const handleOptionTypeChange = value => {\n    resetForm(); // Reset the form when the option type is changed\n    setGlobalOptionType(value);\n  };\n  const handleAddQuestion = () => {\n    if (questions.length < 5) {\n      setQuestions([...questions, {\n        questionText: '',\n        optionType: globalOptionType,\n        options: [{\n          text: '',\n          imageUrl: ''\n        }]\n      }]);\n      setCurrentQuestionIndex(questions.length);\n    }\n  };\n  const handleQuestionSelect = index => {\n    setCurrentQuestionIndex(index);\n  };\n  const handleCreateQuiz = () => {\n    // Simulate quiz link generation\n    const generatedLink = `https://quizzie.com/quiz/${Date.now()}`;\n    setQuizLink(generatedLink);\n    onCreateQuiz(questions); // Pass the questions to the parent component\n\n    setShareModalOpen(true); // Open the ShareQuizModal\n    resetForm(); // Reset the form after creating the quiz\n  };\n  const handleCloseShareModal = () => {\n    setShareModalOpen(false);\n    onClose(); // Close the main modal after sharing\n  };\n  const handleCancel = () => {\n    resetForm(); // Reset the form when \"Cancel\" is clicked\n    onClose();\n  };\n  const getPlaceholder = key => {\n    switch (questions[currentQuestionIndex].optionType) {\n      case 'Text':\n        return 'Text';\n      case 'Image URL':\n        return 'Image URL';\n      case 'Text & Image URL':\n        return key === 'text' ? 'Text' : 'Image URL';\n      default:\n        return 'Option';\n    }\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content qa-question-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-nav\",\n          children: [questions.map((_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `question-num ${index === currentQuestionIndex ? 'active' : ''}`,\n            onClick: () => handleQuestionSelect(index),\n            children: index + 1\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)), questions.length < 5 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"add-question\",\n            onClick: handleAddQuestion,\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: quizType === 'Q&A' ? \"Q&A Question\" : \"Poll Question\",\n          value: questions[currentQuestionIndex].questionText,\n          onChange: e => handleQuestionTextChange(e.target.value),\n          className: \"poll-question-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"option-type-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Option Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"optionType\",\n              value: \"Text\",\n              checked: globalOptionType === 'Text',\n              onChange: () => handleOptionTypeChange('Text')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 15\n            }, this), \"Text\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"optionType\",\n              value: \"Image URL\",\n              checked: globalOptionType === 'Image URL',\n              onChange: () => handleOptionTypeChange('Image URL')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this), \"Image URL\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"optionType\",\n              value: \"Text & Image URL\",\n              checked: globalOptionType === 'Text & Image URL',\n              onChange: () => handleOptionTypeChange('Text & Image URL')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 15\n            }, this), \"Text & Image URL\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-container\",\n          children: [questions[currentQuestionIndex].options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"option\",\n            children: [quizType === 'Q&A' && /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"correctOption\",\n              checked: questions[currentQuestionIndex].correctOption === index,\n              onChange: () => {\n                const updatedQuestions = [...questions];\n                updatedQuestions[currentQuestionIndex].correctOption = index;\n                setQuestions(updatedQuestions);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: option.text,\n              onChange: e => handleOptionChange(index, 'text', e.target.value),\n              placeholder: getPlaceholder('text'),\n              className: \"option-text-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 17\n            }, this), globalOptionType === 'Text & Image URL' && /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: option.imageUrl,\n              onChange: e => handleOptionChange(index, 'imageUrl', e.target.value),\n              placeholder: getPlaceholder('imageUrl'),\n              className: \"option-image-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 19\n            }, this), index > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"remove-option\",\n              onClick: () => handleRemoveOption(index),\n              children: \"\\uD83D\\uDDD1\\uFE0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 15\n          }, this)), questions[currentQuestionIndex].options.length < 4 && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-option\",\n            onClick: handleAddOption,\n            children: \"Add Option\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), quizType === 'Q&A' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timer-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Timer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `timer-button ${questions[currentQuestionIndex].timer === 'OFF' ? 'active' : ''}`,\n            onClick: () => {\n              const updatedQuestions = [...questions];\n              updatedQuestions[currentQuestionIndex].timer = 'OFF';\n              setQuestions(updatedQuestions);\n            },\n            children: \"OFF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `timer-button ${questions[currentQuestionIndex].timer === '5 sec' ? 'active' : ''}`,\n            onClick: () => {\n              const updatedQuestions = [...questions];\n              updatedQuestions[currentQuestionIndex].timer = '5 sec';\n              setQuestions(updatedQuestions);\n            },\n            children: \"5 sec\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `timer-button ${questions[currentQuestionIndex].timer === '10 sec' ? 'active' : ''}`,\n            onClick: () => {\n              const updatedQuestions = [...questions];\n              updatedQuestions[currentQuestionIndex].timer = '10 sec';\n              setQuestions(updatedQuestions);\n            },\n            children: \"10 sec\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modal-button cancel-button\",\n            onClick: handleCancel,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"modal-button continue-button\",\n            onClick: handleCreateQuiz,\n            children: \"Create Quiz\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ShareQuizModal, {\n      isOpen: isShareModalOpen,\n      onClose: handleCloseShareModal,\n      quizLink: quizLink\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(QAQuestionModal, \"PoS24WMu8acGUSBqbf8KRa249ao=\");\n_c = QAQuestionModal;\nexport default QAQuestionModal;\nvar _c;\n$RefreshReg$(_c, \"QAQuestionModal\");","map":{"version":3,"names":["React","useState","ShareQuizModal","jsxDEV","_jsxDEV","Fragment","_Fragment","QAQuestionModal","isOpen","onClose","onCreateQuiz","quizType","_s","initialQuestionState","questionText","optionType","options","text","imageUrl","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","globalOptionType","setGlobalOptionType","isShareModalOpen","setShareModalOpen","quizLink","setQuizLink","resetForm","handleAddOption","length","updatedQuestions","push","handleOptionChange","index","key","value","handleRemoveOption","filter","_","i","handleQuestionTextChange","handleOptionTypeChange","handleAddQuestion","handleQuestionSelect","handleCreateQuiz","generatedLink","Date","now","handleCloseShareModal","handleCancel","getPlaceholder","children","className","map","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","name","checked","option","correctOption","timer","_c","$RefreshReg$"],"sources":["C:/Users/harshith2002/quizzie/src/components/QAQuestionModal.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './QAQuestionModal.css';\r\nimport ShareQuizModal from './ShareQuizModal'; // Import the ShareQuizModal component\r\n\r\nconst QAQuestionModal = ({ isOpen, onClose, onCreateQuiz, quizType }) => {\r\n  const initialQuestionState = [\r\n    { questionText: '', optionType: 'Text', options: [{ text: '', imageUrl: '' }] }\r\n  ];\r\n\r\n  const [questions, setQuestions] = useState(initialQuestionState);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [globalOptionType, setGlobalOptionType] = useState('Text');\r\n  const [isShareModalOpen, setShareModalOpen] = useState(false); // State for ShareQuizModal\r\n  const [quizLink, setQuizLink] = useState(''); // State to store the generated quiz link\r\n\r\n  const resetForm = () => {\r\n    setQuestions(initialQuestionState);\r\n    setCurrentQuestionIndex(0);\r\n    setGlobalOptionType('Text');\r\n  };\r\n\r\n  const handleAddOption = () => {\r\n    if (questions[currentQuestionIndex].options.length < 4) {\r\n      const updatedQuestions = [...questions];\r\n      updatedQuestions[currentQuestionIndex].options.push({ text: '', imageUrl: '' });\r\n      setQuestions(updatedQuestions);\r\n    }\r\n  };\r\n\r\n  const handleOptionChange = (index, key, value) => {\r\n    const updatedQuestions = [...questions];\r\n    updatedQuestions[currentQuestionIndex].options[index][key] = value;\r\n    setQuestions(updatedQuestions);\r\n  };\r\n\r\n  const handleRemoveOption = (index) => {\r\n    const updatedQuestions = [...questions];\r\n    updatedQuestions[currentQuestionIndex].options = updatedQuestions[currentQuestionIndex].options.filter(\r\n      (_, i) => i !== index\r\n    );\r\n    setQuestions(updatedQuestions);\r\n  };\r\n\r\n  const handleQuestionTextChange = (value) => {\r\n    const updatedQuestions = [...questions];\r\n    updatedQuestions[currentQuestionIndex].questionText = value;\r\n    setQuestions(updatedQuestions);\r\n  };\r\n\r\n  const handleOptionTypeChange = (value) => {\r\n    resetForm(); // Reset the form when the option type is changed\r\n    setGlobalOptionType(value);\r\n  };\r\n\r\n  const handleAddQuestion = () => {\r\n    if (questions.length < 5) {\r\n      setQuestions([\r\n        ...questions,\r\n        { questionText: '', optionType: globalOptionType, options: [{ text: '', imageUrl: '' }] }\r\n      ]);\r\n      setCurrentQuestionIndex(questions.length);\r\n    }\r\n  };\r\n\r\n  const handleQuestionSelect = (index) => {\r\n    setCurrentQuestionIndex(index);\r\n  };\r\n\r\n  const handleCreateQuiz = () => {\r\n    // Simulate quiz link generation\r\n    const generatedLink = `https://quizzie.com/quiz/${Date.now()}`;\r\n    setQuizLink(generatedLink);\r\n\r\n    onCreateQuiz(questions); // Pass the questions to the parent component\r\n\r\n    setShareModalOpen(true); // Open the ShareQuizModal\r\n    resetForm(); // Reset the form after creating the quiz\r\n  };\r\n\r\n  const handleCloseShareModal = () => {\r\n    setShareModalOpen(false);\r\n    onClose(); // Close the main modal after sharing\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    resetForm(); // Reset the form when \"Cancel\" is clicked\r\n    onClose();\r\n  };\r\n\r\n  const getPlaceholder = (key) => {\r\n    switch (questions[currentQuestionIndex].optionType) {\r\n      case 'Text':\r\n        return 'Text';\r\n      case 'Image URL':\r\n        return 'Image URL';\r\n      case 'Text & Image URL':\r\n        return key === 'text' ? 'Text' : 'Image URL';\r\n      default:\r\n        return 'Option';\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"modal-overlay\">\r\n        <div className=\"modal-content qa-question-modal\">\r\n          <div className=\"question-nav\">\r\n            {questions.map((_, index) => (\r\n              <div\r\n                key={index}\r\n                className={`question-num ${index === currentQuestionIndex ? 'active' : ''}`}\r\n                onClick={() => handleQuestionSelect(index)}\r\n              >\r\n                {index + 1}\r\n              </div>\r\n            ))}\r\n            {questions.length < 5 && (\r\n              <div className=\"add-question\" onClick={handleAddQuestion}>\r\n                +\r\n              </div>\r\n            )}\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            placeholder={quizType === 'Q&A' ? \"Q&A Question\" : \"Poll Question\"}\r\n            value={questions[currentQuestionIndex].questionText}\r\n            onChange={(e) => handleQuestionTextChange(e.target.value)}\r\n            className=\"poll-question-input\"\r\n          />\r\n          <div className=\"option-type-container\">\r\n            <label>Option Type</label>\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"optionType\"\r\n                value=\"Text\"\r\n                checked={globalOptionType === 'Text'}\r\n                onChange={() => handleOptionTypeChange('Text')}\r\n              />\r\n              Text\r\n            </label>\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"optionType\"\r\n                value=\"Image URL\"\r\n                checked={globalOptionType === 'Image URL'}\r\n                onChange={() => handleOptionTypeChange('Image URL')}\r\n              />\r\n              Image URL\r\n            </label>\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"optionType\"\r\n                value=\"Text & Image URL\"\r\n                checked={globalOptionType === 'Text & Image URL'}\r\n                onChange={() => handleOptionTypeChange('Text & Image URL')}\r\n              />\r\n              Text & Image URL\r\n            </label>\r\n          </div>\r\n          <div className=\"options-container\">\r\n            {questions[currentQuestionIndex].options.map((option, index) => (\r\n              <div key={index} className=\"option\">\r\n                {quizType === 'Q&A' && (\r\n                  <input\r\n                    type=\"radio\"\r\n                    name=\"correctOption\"\r\n                    checked={questions[currentQuestionIndex].correctOption === index}\r\n                    onChange={() => {\r\n                      const updatedQuestions = [...questions];\r\n                      updatedQuestions[currentQuestionIndex].correctOption = index;\r\n                      setQuestions(updatedQuestions);\r\n                    }}\r\n                  />\r\n                )}\r\n                <input\r\n                  type=\"text\"\r\n                  value={option.text}\r\n                  onChange={(e) => handleOptionChange(index, 'text', e.target.value)}\r\n                  placeholder={getPlaceholder('text')}\r\n                  className=\"option-text-input\"\r\n                />\r\n                {globalOptionType === 'Text & Image URL' && (\r\n                  <input\r\n                    type=\"text\"\r\n                    value={option.imageUrl}\r\n                    onChange={(e) => handleOptionChange(index, 'imageUrl', e.target.value)}\r\n                    placeholder={getPlaceholder('imageUrl')}\r\n                    className=\"option-image-input\"\r\n                  />\r\n                )}\r\n                {index > 0 && (\r\n                  <button className=\"remove-option\" onClick={() => handleRemoveOption(index)}>\r\n                    🗑️\r\n                  </button>\r\n                )}\r\n              </div>\r\n            ))}\r\n            {questions[currentQuestionIndex].options.length < 4 && (\r\n              <button className=\"add-option\" onClick={handleAddOption}>\r\n                Add Option\r\n              </button>\r\n            )}\r\n          </div>\r\n          {quizType === 'Q&A' && (\r\n            <div className=\"timer-container\">\r\n              <label>Timer</label>\r\n              <button\r\n                className={`timer-button ${questions[currentQuestionIndex].timer === 'OFF' ? 'active' : ''}`}\r\n                onClick={() => {\r\n                  const updatedQuestions = [...questions];\r\n                  updatedQuestions[currentQuestionIndex].timer = 'OFF';\r\n                  setQuestions(updatedQuestions);\r\n                }}\r\n              >\r\n                OFF\r\n              </button>\r\n              <button\r\n                className={`timer-button ${questions[currentQuestionIndex].timer === '5 sec' ? 'active' : ''}`}\r\n                onClick={() => {\r\n                  const updatedQuestions = [...questions];\r\n                  updatedQuestions[currentQuestionIndex].timer = '5 sec';\r\n                  setQuestions(updatedQuestions);\r\n                }}\r\n              >\r\n                5 sec\r\n              </button>\r\n              <button\r\n                className={`timer-button ${questions[currentQuestionIndex].timer === '10 sec' ? 'active' : ''}`}\r\n                onClick={() => {\r\n                  const updatedQuestions = [...questions];\r\n                  updatedQuestions[currentQuestionIndex].timer = '10 sec';\r\n                  setQuestions(updatedQuestions);\r\n                }}\r\n              >\r\n                10 sec\r\n              </button>\r\n            </div>\r\n          )}\r\n          <div className=\"modal-buttons\">\r\n            <button className=\"modal-button cancel-button\" onClick={handleCancel}>\r\n              Cancel\r\n            </button>\r\n            <button\r\n              className=\"modal-button continue-button\"\r\n              onClick={handleCreateQuiz}\r\n            >\r\n              Create Quiz\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <ShareQuizModal\r\n        isOpen={isShareModalOpen}\r\n        onClose={handleCloseShareModal}\r\n        quizLink={quizLink}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QAQuestionModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}