{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harshith2002\\\\quizzie\\\\src\\\\components\\\\QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport './QuizPage.css';\nimport TrophyImage from '../Assets/images/Trophy.png'; // Import the image\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuizPage = ({\n  getQuizDataById\n}) => {\n  _s();\n  const {\n    quizId\n  } = useParams();\n  const navigate = useNavigate();\n  const [quiz, setQuiz] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [score, setScore] = useState(0);\n  const [isQuizCompleted, setIsQuizCompleted] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(null);\n  useEffect(() => {\n    const quizData = getQuizDataById(quizId);\n    if (quizData) {\n      setQuiz(quizData);\n    } else {\n      alert('Quiz not found');\n      navigate('/');\n    }\n  }, [quizId, getQuizDataById, navigate]);\n  const handleNextQuestion = useCallback(() => {\n    // Only update score if the quiz is not a poll\n    if (quiz.globalOptionType !== 'Poll') {\n      if (selectedOption === quiz.questions[currentQuestionIndex].options[quiz.questions[currentQuestionIndex].correctOption]) {\n        setScore(prevScore => prevScore + 1);\n      }\n    }\n\n    // Move to the next question or finish the quiz\n    if (currentQuestionIndex < quiz.questions.length - 1) {\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n      setSelectedOption(null);\n    } else {\n      setIsQuizCompleted(true);\n    }\n  }, [selectedOption, currentQuestionIndex, quiz === null || quiz === void 0 ? void 0 : quiz.questions, quiz === null || quiz === void 0 ? void 0 : quiz.globalOptionType]);\n  useEffect(() => {\n    if (quiz && quiz.questions[currentQuestionIndex].timer !== 'OFF') {\n      setTimeLeft(parseInt(quiz.questions[currentQuestionIndex].timer, 10));\n      const timerInterval = setInterval(() => {\n        setTimeLeft(prevTime => {\n          if (prevTime <= 1) {\n            clearInterval(timerInterval);\n            handleNextQuestion();\n            return 0;\n          }\n          return prevTime - 1;\n        });\n      }, 1000);\n      return () => clearInterval(timerInterval);\n    } else {\n      setTimeLeft(null);\n    }\n  }, [quiz, currentQuestionIndex, handleNextQuestion]);\n  const handleOptionSelect = option => {\n    setSelectedOption(option);\n  };\n  if (!quiz) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading quiz...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }, this);\n  }\n  if (isQuizCompleted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-page-outer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-completion-container\",\n        children: quiz.globalOptionType === 'Poll' ? /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Thank you for participating in the Poll\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Congrats, Quiz is completed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: TrophyImage,\n            alt: \"Trophy\",\n            className: \"trophy-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Your Score is \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"quiz-score\",\n              children: [score, \"/\", quiz.questions.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 32\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  }\n  const currentQuestion = quiz.questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-page-outer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-count\",\n          children: [currentQuestionIndex + 1, \"/\", quiz.questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), timeLeft !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timer\",\n          children: timeLeft < 10 ? `00:0${timeLeft}s` : `00:${timeLeft}s`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-text\",\n        children: currentQuestion.questionText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options-grid\",\n        children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `option-button ${selectedOption === option ? 'selected' : ''}`,\n          onClick: () => handleOptionSelect(option),\n          children: option.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next-button\",\n        onClick: handleNextQuestion,\n        children: currentQuestionIndex < quiz.questions.length - 1 ? 'Next' : 'Submit'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"6uAORgMdujE1lRBn+sBsxoSVbhE=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","TrophyImage","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizPage","getQuizDataById","_s","quizId","navigate","quiz","setQuiz","currentQuestionIndex","setCurrentQuestionIndex","selectedOption","setSelectedOption","score","setScore","isQuizCompleted","setIsQuizCompleted","timeLeft","setTimeLeft","quizData","alert","handleNextQuestion","globalOptionType","questions","options","correctOption","prevScore","length","prevIndex","timer","parseInt","timerInterval","setInterval","prevTime","clearInterval","handleOptionSelect","option","children","fileName","_jsxFileName","lineNumber","columnNumber","className","src","alt","currentQuestion","questionText","map","index","onClick","text","_c","$RefreshReg$"],"sources":["C:/Users/harshith2002/quizzie/src/components/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport './QuizPage.css';\r\nimport TrophyImage from '../Assets/images/Trophy.png'; // Import the image\r\n\r\nconst QuizPage = ({ getQuizDataById }) => {\r\n  const { quizId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [quiz, setQuiz] = useState(null);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const [score, setScore] = useState(0);\r\n  const [isQuizCompleted, setIsQuizCompleted] = useState(false);\r\n  const [timeLeft, setTimeLeft] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const quizData = getQuizDataById(quizId);\r\n    if (quizData) {\r\n      setQuiz(quizData);\r\n    } else {\r\n      alert('Quiz not found');\r\n      navigate('/');\r\n    }\r\n  }, [quizId, getQuizDataById, navigate]);\r\n\r\n  const handleNextQuestion = useCallback(() => {\r\n    // Only update score if the quiz is not a poll\r\n    if (quiz.globalOptionType !== 'Poll') {\r\n      if (selectedOption === quiz.questions[currentQuestionIndex].options[quiz.questions[currentQuestionIndex].correctOption]) {\r\n        setScore(prevScore => prevScore + 1);\r\n      }\r\n    }\r\n    \r\n    // Move to the next question or finish the quiz\r\n    if (currentQuestionIndex < quiz.questions.length - 1) {\r\n      setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\r\n      setSelectedOption(null);\r\n    } else {\r\n      setIsQuizCompleted(true);\r\n    }\r\n  }, [selectedOption, currentQuestionIndex, quiz?.questions, quiz?.globalOptionType]);\r\n\r\n  useEffect(() => {\r\n    if (quiz && quiz.questions[currentQuestionIndex].timer !== 'OFF') {\r\n      setTimeLeft(parseInt(quiz.questions[currentQuestionIndex].timer, 10));\r\n\r\n      const timerInterval = setInterval(() => {\r\n        setTimeLeft((prevTime) => {\r\n          if (prevTime <= 1) {\r\n            clearInterval(timerInterval);\r\n            handleNextQuestion();\r\n            return 0;\r\n          }\r\n          return prevTime - 1;\r\n        });\r\n      }, 1000);\r\n\r\n      return () => clearInterval(timerInterval);\r\n    } else {\r\n      setTimeLeft(null);\r\n    }\r\n  }, [quiz, currentQuestionIndex, handleNextQuestion]);\r\n\r\n  const handleOptionSelect = (option) => {\r\n    setSelectedOption(option);\r\n  };\r\n\r\n  if (!quiz) {\r\n    return <div>Loading quiz...</div>;\r\n  }\r\n\r\n  if (isQuizCompleted) {\r\n    return (\r\n      <div className=\"quiz-page-outer\">\r\n        <div className=\"quiz-completion-container\">\r\n          {quiz.globalOptionType === 'Poll' ? (\r\n            <h2>Thank you for participating in the Poll</h2>\r\n          ) : (\r\n            <>\r\n              <h2>Congrats, Quiz is completed</h2>\r\n              <img src={TrophyImage} alt=\"Trophy\" className=\"trophy-image\" />\r\n              <p>Your Score is <span className=\"quiz-score\">{score}/{quiz.questions.length}</span></p>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const currentQuestion = quiz.questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"quiz-page-outer\">\r\n      <div className=\"quiz-page\">\r\n        <div className=\"quiz-header\">\r\n          <div className=\"question-count\">\r\n            {currentQuestionIndex + 1}/{quiz.questions.length}\r\n          </div>\r\n          {timeLeft !== null && (\r\n            <div className=\"timer\">\r\n              {timeLeft < 10 ? `00:0${timeLeft}s` : `00:${timeLeft}s`}\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"question-text\">\r\n          {currentQuestion.questionText}\r\n        </div>\r\n        <div className=\"options-grid\">\r\n          {currentQuestion.options.map((option, index) => (\r\n            <button\r\n              key={index}\r\n              className={`option-button ${selectedOption === option ? 'selected' : ''}`}\r\n              onClick={() => handleOptionSelect(option)}\r\n            >\r\n              {option.text}\r\n            </button>\r\n          ))}\r\n        </div>\r\n        <button\r\n          className=\"next-button\"\r\n          onClick={handleNextQuestion}\r\n        >\r\n          {currentQuestionIndex < quiz.questions.length - 1 ? 'Next' : 'Submit'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}