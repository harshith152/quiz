{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harshith2002\\\\quizzie\\\\src\\\\components\\\\QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = ({\n  questions\n}) => {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(null); // State for timer\n\n  const currentQuestion = questions[currentQuestionIndex];\n\n  // Wrap handleNextQuestion in useCallback to avoid redefinition on every render\n  const handleNextQuestion = useCallback(() => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n      setSelectedOption(null); // Reset selected option for the next question\n    } else {\n      // Handle quiz submission or final step\n      alert('Quiz completed!');\n    }\n  }, [currentQuestionIndex, questions.length]);\n\n  // Handle the timer logic\n  useEffect(() => {\n    if (currentQuestion.timer && currentQuestion.timer !== 'OFF') {\n      setTimeLeft(parseInt(currentQuestion.timer, 10));\n      const timerInterval = setInterval(() => {\n        setTimeLeft(prevTime => {\n          if (prevTime <= 1) {\n            clearInterval(timerInterval);\n            handleNextQuestion(); // Auto-move to the next question when time runs out\n            return 0;\n          }\n          return prevTime - 1;\n        });\n      }, 1000);\n      return () => clearInterval(timerInterval); // Cleanup on unmount or re-render\n    } else {\n      setTimeLeft(null); // No timer set\n    }\n  }, [currentQuestion.timer, handleNextQuestion]);\n\n  // Ensure this hook is not called conditionally\n  useEffect(() => {\n    // This hook handles any side effects that should run on every render or based on specific dependencies\n    console.log('Current question:', currentQuestion);\n  }, [currentQuestion]);\n  const handleOptionSelect = option => {\n    setSelectedOption(option);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-number\",\n        children: [currentQuestionIndex + 1, \"/\", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), timeLeft !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        style: {\n          color: timeLeft <= 5 ? 'red' : 'black'\n        },\n        children: [\"00:\", timeLeft < 10 ? `0${timeLeft}` : timeLeft, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-text\",\n      children: currentQuestion.questionText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options-container\",\n      children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `option-button ${selectedOption === option ? 'selected' : ''}`,\n        onClick: () => handleOptionSelect(option),\n        children: option.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: handleNextQuestion,\n      children: currentQuestionIndex < questions.length - 1 ? 'Next' : 'Submit'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"kfzSFPkJVCAHb5f0mqTgFZtAqQI=\");\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","QuizPage","questions","_s","currentQuestionIndex","setCurrentQuestionIndex","selectedOption","setSelectedOption","timeLeft","setTimeLeft","currentQuestion","handleNextQuestion","length","prevIndex","alert","timer","parseInt","timerInterval","setInterval","prevTime","clearInterval","console","log","handleOptionSelect","option","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","questionText","options","map","index","onClick","text","_c","$RefreshReg$"],"sources":["C:/Users/harshith2002/quizzie/src/components/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\n\r\nconst QuizPage = ({ questions }) => {\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const [timeLeft, setTimeLeft] = useState(null); // State for timer\r\n\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  // Wrap handleNextQuestion in useCallback to avoid redefinition on every render\r\n  const handleNextQuestion = useCallback(() => {\r\n    if (currentQuestionIndex < questions.length - 1) {\r\n      setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\r\n      setSelectedOption(null); // Reset selected option for the next question\r\n    } else {\r\n      // Handle quiz submission or final step\r\n      alert('Quiz completed!');\r\n    }\r\n  }, [currentQuestionIndex, questions.length]);\r\n\r\n  // Handle the timer logic\r\n  useEffect(() => {\r\n    if (currentQuestion.timer && currentQuestion.timer !== 'OFF') {\r\n      setTimeLeft(parseInt(currentQuestion.timer, 10));\r\n\r\n      const timerInterval = setInterval(() => {\r\n        setTimeLeft((prevTime) => {\r\n          if (prevTime <= 1) {\r\n            clearInterval(timerInterval);\r\n            handleNextQuestion(); // Auto-move to the next question when time runs out\r\n            return 0;\r\n          }\r\n          return prevTime - 1;\r\n        });\r\n      }, 1000);\r\n\r\n      return () => clearInterval(timerInterval); // Cleanup on unmount or re-render\r\n    } else {\r\n      setTimeLeft(null); // No timer set\r\n    }\r\n  }, [currentQuestion.timer, handleNextQuestion]);\r\n\r\n  // Ensure this hook is not called conditionally\r\n  useEffect(() => {\r\n    // This hook handles any side effects that should run on every render or based on specific dependencies\r\n    console.log('Current question:', currentQuestion);\r\n  }, [currentQuestion]);\r\n\r\n  const handleOptionSelect = (option) => {\r\n    setSelectedOption(option);\r\n  };\r\n\r\n  return (\r\n    <div className=\"quiz-page\">\r\n      <div className=\"question-header\">\r\n        <div className=\"question-number\">\r\n          {currentQuestionIndex + 1}/{questions.length}\r\n        </div>\r\n        {timeLeft !== null && (\r\n          <div className=\"timer\" style={{ color: timeLeft <= 5 ? 'red' : 'black' }}>\r\n            00:{timeLeft < 10 ? `0${timeLeft}` : timeLeft}s\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"question-text\">{currentQuestion.questionText}</div>\r\n      <div className=\"options-container\">\r\n        {currentQuestion.options.map((option, index) => (\r\n          <button\r\n            key={index}\r\n            className={`option-button ${selectedOption === option ? 'selected' : ''}`}\r\n            onClick={() => handleOptionSelect(option)}\r\n          >\r\n            {option.text}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      <button className=\"next-button\" onClick={handleNextQuestion}>\r\n        {currentQuestionIndex < questions.length - 1 ? 'Next' : 'Submit'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}