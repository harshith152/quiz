{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harshith2002\\\\quizzie\\\\src\\\\components\\\\QuizPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom'; // Import useParams and useNavigate for routing\nimport './QuizPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizPage = ({\n  getQuizDataById\n}) => {\n  _s();\n  const {\n    quizId\n  } = useParams(); // Get quizId from URL parameters\n  const navigate = useNavigate(); // For redirecting after the quiz is finished\n  const quizData = getQuizDataById(quizId); // Get the quiz data based on the quizId\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(null);\n  if (!quizData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Quiz not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this);\n  }\n  const currentQuestion = quizData.questions[currentQuestionIndex];\n  const totalQuestions = quizData.questions.length;\n  const handleNextQuestion = () => {\n    if (currentQuestionIndex < totalQuestions - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      setSelectedOption(null);\n    } else {\n      handleSubmitQuiz();\n    }\n  };\n  useEffect(() => {\n    if (currentQuestion.timer !== 'OFF') {\n      setTimeLeft(parseInt(currentQuestion.timer));\n      const timer = setInterval(() => {\n        setTimeLeft(prevTime => {\n          if (prevTime <= 1) {\n            clearInterval(timer);\n            handleNextQuestion();\n            return 0;\n          }\n          return prevTime - 1;\n        });\n      }, 1000);\n      return () => clearInterval(timer);\n    }\n  }, [currentQuestion.timer, handleNextQuestion]);\n  const handleOptionSelect = index => {\n    setSelectedOption(index);\n  };\n  const handleSubmitQuiz = () => {\n    alert('Quiz Submitted!');\n    navigate('/home/dashboard'); // Redirect to the dashboard after submission\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-counter\",\n        children: [String(currentQuestionIndex + 1).padStart(2, '0'), \"/\", String(totalQuestions).padStart(2, '0')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), currentQuestion.timer !== 'OFF' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: [\"00:\", timeLeft < 10 ? `0${timeLeft}` : timeLeft, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-question\",\n      children: currentQuestion.questionText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-options\",\n      children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `option-button ${selectedOption === index ? 'selected' : ''}`,\n        onClick: () => handleOptionSelect(index),\n        children: option.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: handleNextQuestion,\n      children: currentQuestionIndex < totalQuestions - 1 ? 'Next' : 'Submit'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizPage, \"mTM/jljqlK3/bWlb/FPlQJMfTLY=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = QuizPage;\nexport default QuizPage;\nvar _c;\n$RefreshReg$(_c, \"QuizPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","jsxDEV","_jsxDEV","QuizPage","getQuizDataById","_s","quizId","navigate","quizData","currentQuestionIndex","setCurrentQuestionIndex","selectedOption","setSelectedOption","timeLeft","setTimeLeft","children","fileName","_jsxFileName","lineNumber","columnNumber","currentQuestion","questions","totalQuestions","length","handleNextQuestion","handleSubmitQuiz","timer","parseInt","setInterval","prevTime","clearInterval","handleOptionSelect","index","alert","className","String","padStart","questionText","options","map","option","onClick","text","_c","$RefreshReg$"],"sources":["C:/Users/harshith2002/quizzie/src/components/QuizPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom'; // Import useParams and useNavigate for routing\r\nimport './QuizPage.css';\r\n\r\nconst QuizPage = ({ getQuizDataById }) => {\r\n  const { quizId } = useParams(); // Get quizId from URL parameters\r\n  const navigate = useNavigate(); // For redirecting after the quiz is finished\r\n  const quizData = getQuizDataById(quizId); // Get the quiz data based on the quizId\r\n\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const [timeLeft, setTimeLeft] = useState(null);\r\n\r\n  if (!quizData) {\r\n    return <div>Quiz not found</div>;\r\n  }\r\n\r\n  const currentQuestion = quizData.questions[currentQuestionIndex];\r\n  const totalQuestions = quizData.questions.length;\r\n\r\n  const handleNextQuestion = () => {\r\n    if (currentQuestionIndex < totalQuestions - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n      setSelectedOption(null);\r\n    } else {\r\n      handleSubmitQuiz();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (currentQuestion.timer !== 'OFF') {\r\n      setTimeLeft(parseInt(currentQuestion.timer));\r\n      const timer = setInterval(() => {\r\n        setTimeLeft(prevTime => {\r\n          if (prevTime <= 1) {\r\n            clearInterval(timer);\r\n            handleNextQuestion();\r\n            return 0;\r\n          }\r\n          return prevTime - 1;\r\n        });\r\n      }, 1000);\r\n\r\n      return () => clearInterval(timer);\r\n    }\r\n  }, [currentQuestion.timer, handleNextQuestion]);\r\n\r\n  const handleOptionSelect = (index) => {\r\n    setSelectedOption(index);\r\n  };\r\n\r\n  const handleSubmitQuiz = () => {\r\n    alert('Quiz Submitted!');\r\n    navigate('/home/dashboard'); // Redirect to the dashboard after submission\r\n  };\r\n\r\n  return (\r\n    <div className=\"quiz-page\">\r\n      <div className=\"quiz-header\">\r\n        <div className=\"question-counter\">\r\n          {String(currentQuestionIndex + 1).padStart(2, '0')}/{String(totalQuestions).padStart(2, '0')}\r\n        </div>\r\n        {currentQuestion.timer !== 'OFF' && (\r\n          <div className=\"timer\">\r\n            00:{timeLeft < 10 ? `0${timeLeft}` : timeLeft}s\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"quiz-question\">\r\n        {currentQuestion.questionText}\r\n      </div>\r\n      <div className=\"quiz-options\">\r\n        {currentQuestion.options.map((option, index) => (\r\n          <button\r\n            key={index}\r\n            className={`option-button ${selectedOption === index ? 'selected' : ''}`}\r\n            onClick={() => handleOptionSelect(index)}\r\n          >\r\n            {option.text}\r\n          </button>\r\n        ))}\r\n      </div>\r\n      <button className=\"next-button\" onClick={handleNextQuestion}>\r\n        {currentQuestionIndex < totalQuestions - 1 ? 'Next' : 'Submit'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}